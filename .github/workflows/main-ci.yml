---
name: Main CI Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  issues: write
  packages: write

concurrency:
  group: main-ci-${{ github.sha }}
  cancel-in-progress: false

jobs:
  # Stage 1: Change Detection
  detect-changes:
    name: Change Detection
    runs-on: self-hosted
    timeout-minutes: 5
    outputs:
      python_changed: ${{ steps.changes.outputs.python_changed }}
      yaml_changed: ${{ steps.changes.outputs.yaml_changed }}
      docker_changed: ${{ steps.changes.outputs.docker_changed }}
      bulletin_changed: ${{ steps.changes.outputs.bulletin_changed }}
      docs_changed: ${{ steps.changes.outputs.docs_changed }}
      files_changed: ${{ steps.changes.outputs.files_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true

      - name: Detect file changes
        id: changes
        run: |
          echo "Analyzing changes..."

          # Get changed files
          git diff --name-only HEAD~1..HEAD > changed_files.txt || echo "" > changed_files.txt

          # Count different types of changes
          python_count=$(grep -E '\.(py)$' changed_files.txt | wc -l || echo "0")
          yaml_count=$(grep -E '\.(ya?ml|json)$' changed_files.txt | wc -l || echo "0")
          docker_count=$(grep -E '(Dockerfile|docker-compose\.yml|docker-compose\.yaml|\.dockerignore)' changed_files.txt | wc -l || echo "0")
          bulletin_count=$(grep -E '(bulletin_board|bulletin-board)' changed_files.txt | wc -l || echo "0")
          docs_count=$(grep -E '\.(md|rst|txt)$' changed_files.txt | wc -l || echo "0")
          total_files=$(cat changed_files.txt | wc -l)

          # Set outputs
          echo "python_changed=$([[ $python_count -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "yaml_changed=$([[ $yaml_count -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "docker_changed=$([[ $docker_count -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "bulletin_changed=$([[ $bulletin_count -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "docs_changed=$([[ $docs_count -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "files_changed=$total_files" >> $GITHUB_OUTPUT

          echo "[INFO] Change Summary:"
          echo "  Python files: $python_count"
          echo "  YAML/JSON files: $yaml_count"
          echo "  Docker files: $docker_count"
          echo "  Bulletin Board files: $bulletin_count"
          echo "  Documentation: $docs_count"
          echo "  Total files: $total_files"

  # Stage 2: Code Quality Checks
  lint-stages:
    name: Code Quality - ${{ matrix.stage }}
    needs: detect-changes
    if: needs.detect-changes.outputs.python_changed == 'true' || needs.detect-changes.outputs.yaml_changed == 'true'
    runs-on: self-hosted
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        stage:
          - format
          - basic
          - full
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Run ${{ matrix.stage }} linting
        run: |
          echo "Running ${{ matrix.stage }} linting checks..."
          ./automation/ci-cd/run-lint-stage.sh ${{ matrix.stage }}

  # Stage 3: Bulletin Board Tests
  bulletin-board-tests:
    name: Bulletin Board Tests
    needs: [detect-changes, lint-stages]
    if: >
      (needs.detect-changes.outputs.python_changed == 'true' ||
       needs.detect-changes.outputs.bulletin_changed == 'true') &&
      github.event.inputs.skip_tests != 'true'
    runs-on: self-hosted
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Set up test environment
        run: |
          echo "Setting up test environment..."
          export USER_ID=$(id -u)
          export GROUP_ID=$(id -g)
          echo "USER_ID=$USER_ID" >> $GITHUB_ENV
          echo "GROUP_ID=$GROUP_ID" >> $GITHUB_ENV

      - name: Run bulletin board tests
        run: |
          echo "Running bulletin board tests..."
          docker-compose run --rm python-ci pytest tests/bulletin_board/ -v --cov=packages/bulletin_board --cov-report=xml

      - name: Upload coverage reports
        if: always()
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: bulletin-board
          name: bulletin-board-coverage

  # Stage 4: Docker Build & Push
  docker-build:
    name: Build Docker Images
    needs: [detect-changes, bulletin-board-tests]
    if: >
      needs.detect-changes.outputs.docker_changed == 'true' ||
      needs.detect-changes.outputs.bulletin_changed == 'true'
    runs-on: self-hosted
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push bulletin board images
        run: |
          echo "Building bulletin board images..."

          # Build images
          docker-compose build bulletin-web bulletin-collector

          # Tag for registry
          docker tag agentsocial_bulletin-web:latest ghcr.io/${{ github.repository_owner }}/agentsocial-bulletin-web:latest
          docker tag agentsocial_bulletin-web:latest ghcr.io/${{ github.repository_owner }}/agentsocial-bulletin-web:${{ github.sha }}
          docker tag agentsocial_bulletin-collector:latest ghcr.io/${{ github.repository_owner }}/agentsocial-bulletin-collector:latest
          docker tag agentsocial_bulletin-collector:latest ghcr.io/${{ github.repository_owner }}/agentsocial-bulletin-collector:${{ github.sha }}

          # Push to registry
          docker push ghcr.io/${{ github.repository_owner }}/agentsocial-bulletin-web:latest
          docker push ghcr.io/${{ github.repository_owner }}/agentsocial-bulletin-web:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/agentsocial-bulletin-collector:latest
          docker push ghcr.io/${{ github.repository_owner }}/agentsocial-bulletin-collector:${{ github.sha }}

  # Stage 5: Integration Tests
  integration-tests:
    name: Integration Tests
    needs: docker-build
    if: github.event.inputs.skip_tests != 'true'
    runs-on: self-hosted
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Start bulletin board services
        run: |
          echo "Starting bulletin board services..."
          docker-compose --profile bulletin up -d

          # Wait for services to be ready
          echo "Waiting for services to be ready..."
          sleep 30

          # Check health
          curl -f http://localhost:8080/health || exit 1

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          docker-compose run --rm python-ci python tests/test_bulletin_board_full.py

      - name: Stop services
        if: always()
        run: |
          docker-compose --profile bulletin down

  # Stage 6: Documentation Update
  docs-update:
    name: Documentation Update
    needs: detect-changes
    if: needs.detect-changes.outputs.docs_changed == 'true'
    runs-on: self-hosted
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Check markdown links
        run: |
          echo "Checking markdown links..."
          docker-compose run --rm python-ci python automation/analysis/check-markdown-links.py --internal-only .

  # Stage 7: Deploy (placeholder for future deployment)
  deploy:
    name: Deploy to Production
    needs: [bulletin-board-tests, docker-build, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: self-hosted
    timeout-minutes: 10
    steps:
      - name: Deploy notification
        run: |
          echo "🚀 Ready to deploy AgentSocial bulletin board!"
          echo "Version: ${{ github.sha }}"
          echo "Docker images have been pushed to GitHub Container Registry."
          echo ""
          echo "To deploy, pull the latest images:"
          echo "  docker pull ghcr.io/${{ github.repository_owner }}/agentsocial-bulletin-web:latest"
          echo "  docker pull ghcr.io/${{ github.repository_owner }}/agentsocial-bulletin-collector:latest"

  # Final Status
  ci-status:
    name: CI Pipeline Status
    needs:
      - detect-changes
      - lint-stages
      - bulletin-board-tests
      - docker-build
      - integration-tests
      - docs-update
      - deploy
    if: always()
    runs-on: self-hosted
    timeout-minutes: 5
    steps:
      - name: Pipeline summary
        run: |
          echo "======================================"
          echo "  Main CI Pipeline Summary"
          echo "======================================"
          echo ""
          echo "📊 Results:"
          echo "  Code Quality: ${{ needs.lint-stages.result }}"
          echo "  Bulletin Board Tests: ${{ needs.bulletin-board-tests.result }}"
          echo "  Docker Build: ${{ needs.docker-build.result }}"
          echo "  Integration Tests: ${{ needs.integration-tests.result }}"
          echo "  Documentation: ${{ needs.docs-update.result }}"
          echo "  Deployment: ${{ needs.deploy.result }}"
          echo ""

          if [[ "${{ needs.bulletin-board-tests.result }}" == "success" ]] && \
             [[ "${{ needs.docker-build.result }}" == "success" ]] && \
             [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "✅ Pipeline completed successfully!"
          else
            echo "❌ Pipeline has failures. Please check the logs."
            exit 1
          fi
